# database.py
# -*- coding: utf-8 -*-

import os
import pandas as pd
from sqlalchemy import create_engine, text
from typing import Optional, List, Dict, Any


def get_oracle_engine():
    """Oracle 데이터베이스 엔진을 생성하고 필요한 테이블을 초기화합니다."""
    host = os.getenv("ORA_HOST")
    user = os.getenv("ORA_USER")
    pw = os.getenv("ORA_PASSWORD")
    svc = os.getenv("ORA_SERVICE")
    port = os.getenv("ORA_PORT", "1521")

    if not (host and user and pw and svc):
        return None

    url = f"oracle+oracledb://{user}:{pw}@{host}:{port}/?service_name={svc}"

    try:
        eng = create_engine(url, pool_pre_ping=True)
        _initialize_tables(eng)
        return eng
    except Exception:
        return None


def _initialize_tables(engine):
    """필요한 테이블들을 생성합니다."""
    with engine.begin() as conn:
        # IG_COMMENTS 테이블 생성
        exists = conn.exec_driver_sql(
            "SELECT COUNT(*) FROM USER_TABLES WHERE TABLE_NAME = 'IG_COMMENTS'"
        ).scalar()

        if not exists:
            conn.exec_driver_sql(
                """
                CREATE TABLE IG_COMMENTS (
                  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                  SOURCE      VARCHAR2(20) DEFAULT 'instagram',
                  POST_ID     VARCHAR2(64),
                  AUTHOR      VARCHAR2(64),
                  COMMENT_AT  TIMESTAMP WITH TIME ZONE,
                  TEXT        CLOB,
                  META_JSON   CLOB CHECK (META_JSON IS JSON)
                )
                """
            )

        # EVENTS 테이블 생성
        exists = conn.exec_driver_sql(
            "SELECT COUNT(*) FROM USER_TABLES WHERE TABLE_NAME = 'EVENTS'"
        ).scalar()

        if not exists:
            conn.exec_driver_sql(
                """
                CREATE TABLE EVENTS (
                  ID           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                  COMMENT_ID   NUMBER,
                  CREATED_AT   TIMESTAMP WITH TIME ZONE NOT NULL,
                  USER_ID      VARCHAR2(64),
                  RAW_TEXT     CLOB,
                  SUGGESTION   CLOB,
                  SCORES_JSON  CLOB CHECK (SCORES_JSON IS JSON),
                  TOXICITY     NUMBER(6,5),
                  AGGRESSION   NUMBER(6,5),
                  HATE         NUMBER(6,5),
                  TEMP_C       NUMBER(5,2),
                  SEVERITY     VARCHAR2(10),
                  SENT_CHOICE  VARCHAR2(10)
                )
                """
            )


def get_post_list(engine) -> List[str]:
    """게시글 목록을 가져옵니다."""
    if engine is None:
        return []

    with engine.begin() as conn:
        posts = conn.execute(text(
            """
            SELECT DISTINCT POST_ID
            FROM IG_COMMENTS
            WHERE POST_ID IS NOT NULL
            ORDER BY POST_ID DESC
            """
        )).scalars().all()

    return list(posts)


def get_comments_by_post(engine, post_id: str) -> List[Dict[str, Any]]:
    """특정 게시글의 댓글들을 가져옵니다."""
    if engine is None:
        return []

    with engine.begin() as conn:
        rows = conn.execute(text(
            """
            SELECT id, author, text, comment_at
            FROM IG_COMMENTS
            WHERE POST_ID = :pid
            ORDER BY comment_at ASC NULLS LAST, id ASC
            """
        ), {"pid": post_id}).mappings().all()

    return [
        {
            "id": r["ID"],
            "author": r.get("AUTHOR", "?"),
            "text": r.get("TEXT", ""),
            "dt": r.get("COMMENT_AT")
        }
        for r in rows
    ]


def get_user_events(engine, user_id: str, start_date, end_date) -> pd.DataFrame:
    """특정 사용자의 이벤트 데이터를 가져옵니다."""
    if engine is None:
        return pd.DataFrame()

    with engine.begin() as conn:
        df = pd.read_sql(text(
            """
            SELECT * FROM EVENTS
            WHERE CREATED_AT BETWEEN :s AND :e AND USER_ID = :uid
            """
        ), conn, params={"s": start_date, "e": end_date, "uid": user_id})

    return df